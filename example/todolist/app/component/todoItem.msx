var m = mReact;
var _ = require('../utils');
var ESCAPE_KEY = 27;
var ENTER_KEY = 13;
var TodoItem = m.createComponent({
    onHandleSubmit: function () {
      var val = this.state.editText.trim();
      if (val) {
        this.props.onSave({
          id: this.todoId, 
          value: val
        });
        this.setState({editText: val});
      } else {
        this.props.onDestroy({id: this.todoId});
      }
    },

    onHandleEdit: function () {
      this.props.onEdit({id: this.todoId});
      this.setState({editText: this.props.todo.title});
    },
    onToggle: function(e){
      this.props.onToggle({id: this.todoId});
      e.stopPropagation();
    },
    onDestroy: function(){
      this.props.onDestroy({id: this.todoId});
    },
    onHandleKeyDown: function (event) {
      if (event.which === ESCAPE_KEY) {
        this.setState({editText: this.props.todo.title});
        this.props.onCancel({id: this.todoId});
      } else if (event.which === ENTER_KEY) {
        this.onHandleSubmit();
      }
    },

    onHandleChange: function (event) {
      this.setState({editText: event.target.value});
    },

    getInitialState: function () {
      return {editText: this.props.todo.title};
    },

    componentWillReceiveProps: function(props){
      this.todoId = props.todo.id;
      return props;
    },
    /**
     * This is a completely optional performance enhancement that you can
     * implement on any React component. If you were to delete this method
     * the app would still work correctly (and still be very performant!), we
     * just use it as an example of how little code it takes to get an order
     * of magnitude performance improvement.
     */
    shouldComponentUpdate: function (oldProps, oldState) {
      return (
        this.props.todo !== oldProps.todo ||
        this.state.editText !== oldState.editText
      );
    },

    /**
     * Safely manipulate the DOM after updating the state when invoking
     * `this.props.onEdit()` in the `handleEdit` method above.
     * For more info refer to notes at https://facebook.github.io/react/docs/component-api.html#setstate
     * and https://facebook.github.io/react/docs/component-specs.html#updating-componentdidupdate
     */
    componentDidUpdate: function (el, prevProps) {
      if (!prevProps.editing && this.props.editing) {
        var node = el.querySelector('.edit-field');
        node.focus();
        node.setSelectionRange(node.value.length, node.value.length);
      }
    },

    render: function (props) {
      var todo = props.todo;
      return (
        <li className={_.classNames({
          completed: todo.completed,
          editing: todo.status === 'editing'
        })}>
          <div className="view">
            <input
              id={todo.id}
              className="toggle"
              type="checkbox"
              checked={todo.completed}
              evChange={this.onToggle}
            />
            <label ondblclick={this.onHandleEdit}>
              {todo.title}
            </label>
            <button className="destroy" onclick={this.onDestroy} />
          </div>
          <input
            ref="editField"
            className="edit edit-field"
            value={this.state.editText}
            evBlur={this.onHandleSubmit}
            evInput={this.onHandleChange}
            evKeyDown={this.onHandleKeyDown}
          />
        </li>
      );
    }
});

module.exports = TodoItem;