var container = document.getElementById('container');
var m = require('../../build/m-react');
// var data = {temp: 10};
// function oninput(e){
//   console.log(e);
//   data.temp = e.target.value;
//   m.redraw();
// }
var MyApp = m.createComponent({
  render: function(props, state) {
    return (
      <div>
        <div className="mui-appbar mui-appbar-line-height mui-text-headline mui-text-white">记一笔</div>
        <form className="mui-form-inline">
        <div class="mui-form-group">
          <input type="text" class="mui-form-control" oninput={this.oninput.bind(this)} value={state.temp}/>
          <label class="mui-form-floating-label">日期</label>
          <span className="mui-text-subhead">K</span>
        </div>
          
        </form>
        <br/>
        <TemperatureConverter value={state.temp}>
          {"celsius:"}{this.kelvinToCelsius(state.temp)}
          <br/>
          {"fahrenheit:"}{this.kelvinToFahrenheit(state.temp)}
        </TemperatureConverter>
      </div>
    );
  },
  oninput: function(e){
    console.log(e);
    this.setState({
      temp: e.target.value
    });
  },
  shouldComponentUpdate: function(oldProps, oldState){
    return Number(this.state.temp) !== 5;
  },
  getInitialState: function(){
    return {temp: 10};
  },
  kelvinToCelsius: function(value) {
    return value - 273.15;
  },
  kelvinToFahrenheit: function(value) {
    return (value / 5 * (value - 273.15)) + 32;
  }
});
var TemperatureConverter = m.createComponent({
  render: function(props, state) {
    return (
      <div ref="temp-converter">
      </div>
    );
  },
  getInitialState: function(){
    return {date: (new Date()).toString()};
  },
  componentDidMount:function(el){
    // var self = this;
    console.log('componentDidMount');
    m.render(el, this.props.children);
    // this.timer = setInterval(function(){
    //   self.setState({
    //     date: (new Date()).toString()
    //   });
    // },1000);
  },
  componentWillUpdate:function(el){
    console.log('componentWillUpdate');
    console.log(el);
    console.log(this.props.children);
    // m.render(el, this.props.children);
  },
  componentWillUnmount: function(e){
    // clearTimeout(this.timer);
  }
});
m.mount(document.getElementById('container'), MyApp);
